# Docker Compose for Production Environment
# Use: docker-compose -f docker-compose.prod.yml up --build

version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: enigma-backend-prod
    environment:
      - ENIGMA_ENVIRONMENT=production
      - ENIGMA_DEBUG=false
      - ENIGMA_HOST=0.0.0.0
      - ENIGMA_PORT=8000
      - ENIGMA_USE_MOCK_APIS=false
      - ENIGMA_LOG_LEVEL=INFO
      - ENIGMA_MAX_WORKERS=4
      - ENIGMA_RATE_LIMIT_REQUESTS=100
      - ENIGMA_RATE_LIMIT_WINDOW=60
      - ENIGMA_SESSION_TIMEOUT=3600
      - ENIGMA_ENABLE_MONITORING=true
      # API credentials (should be set via environment variables or secrets)
      - ENIGMA_JIRA_BASE_URL=${ENIGMA_JIRA_BASE_URL}
      - ENIGMA_JIRA_USERNAME=${ENIGMA_JIRA_USERNAME}
      - ENIGMA_JIRA_TOKEN=${ENIGMA_JIRA_TOKEN}
      - ENIGMA_GITHUB_TOKEN=${ENIGMA_GITHUB_TOKEN}
      - ENIGMA_GITHUB_ORGANIZATION=${ENIGMA_GITHUB_ORGANIZATION}
      - ENIGMA_CONFLUENCE_BASE_URL=${ENIGMA_CONFLUENCE_BASE_URL}
      - ENIGMA_CONFLUENCE_USERNAME=${ENIGMA_CONFLUENCE_USERNAME}
      - ENIGMA_CONFLUENCE_TOKEN=${ENIGMA_CONFLUENCE_TOKEN}
      - ENIGMA_SECRET_KEY=${ENIGMA_SECRET_KEY}
    volumes:
      - ./config:/app/config:ro
      - backend_data:/app/data
      - backend_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - enigma-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Frontend Production Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: enigma-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://backend:8000
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - enigma-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m

  # Log Aggregator (Optional for production monitoring)
  log-aggregator:
    image: fluent/fluent-bit:2.0
    container_name: enigma-log-aggregator
    volumes:
      - backend_logs:/fluent-bit/logs:ro
      - ./deployment/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    depends_on:
      - backend
    networks:
      - enigma-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Metrics Collector (Optional for production monitoring)
  metrics:
    image: prom/prometheus:latest
    container_name: enigma-metrics
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - enigma-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  enigma-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16