import React, { createContext, useContext, useReducer, useEffect } from 'react'\nimport { Repository, RepositoryRequest } from '@/types'\nimport { repositoryApi } from '@/services/api'\n\ninterface RepositoryState {\n  repositories: Repository[]\n  selectedRepositories: string[]\n  loading: boolean\n  error: string | null\n}\n\ntype RepositoryAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_REPOSITORIES'; payload: Repository[] }\n  | { type: 'ADD_REPOSITORY'; payload: Repository }\n  | { type: 'UPDATE_REPOSITORY'; payload: { id: string; repository: Repository } }\n  | { type: 'DELETE_REPOSITORY'; payload: string }\n  | { type: 'SET_SELECTED_REPOSITORIES'; payload: string[] }\n  | { type: 'TOGGLE_REPOSITORY_SELECTION'; payload: string }\n\ninterface RepositoryContextType extends RepositoryState {\n  // Actions\n  loadRepositories: () => Promise<void>\n  createRepository: (repository: RepositoryRequest) => Promise<void>\n  updateRepository: (id: string, repository: Partial<RepositoryRequest>) => Promise<void>\n  deleteRepository: (id: string) => Promise<void>\n  setSelectedRepositories: (repositoryIds: string[]) => void\n  toggleRepositorySelection: (repositoryId: string) => void\n  clearError: () => void\n}\n\nconst initialState: RepositoryState = {\n  repositories: [],\n  selectedRepositories: [],\n  loading: false,\n  error: null,\n}\n\nfunction repositoryReducer(state: RepositoryState, action: RepositoryAction): RepositoryState {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload }\n    \n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false }\n    \n    case 'SET_REPOSITORIES':\n      return { ...state, repositories: action.payload, loading: false, error: null }\n    \n    case 'ADD_REPOSITORY':\n      return {\n        ...state,\n        repositories: [...state.repositories, action.payload],\n        loading: false,\n        error: null,\n      }\n    \n    case 'UPDATE_REPOSITORY':\n      return {\n        ...state,\n        repositories: state.repositories.map(repo =>\n          repo.id === action.payload.id ? action.payload.repository : repo\n        ),\n        loading: false,\n        error: null,\n      }\n    \n    case 'DELETE_REPOSITORY':\n      return {\n        ...state,\n        repositories: state.repositories.filter(repo => repo.id !== action.payload),\n        selectedRepositories: state.selectedRepositories.filter(id => id !== action.payload),\n        loading: false,\n        error: null,\n      }\n    \n    case 'SET_SELECTED_REPOSITORIES':\n      return { ...state, selectedRepositories: action.payload }\n    \n    case 'TOGGLE_REPOSITORY_SELECTION':\n      const isSelected = state.selectedRepositories.includes(action.payload)\n      return {\n        ...state,\n        selectedRepositories: isSelected\n          ? state.selectedRepositories.filter(id => id !== action.payload)\n          : [...state.selectedRepositories, action.payload],\n      }\n    \n    default:\n      return state\n  }\n}\n\nconst RepositoryContext = createContext<RepositoryContextType | undefined>(undefined)\n\nexport function RepositoryProvider({ children }: { children: React.ReactNode }) {\n  const [state, dispatch] = useReducer(repositoryReducer, initialState)\n\n  // Load repositories on mount\n  useEffect(() => {\n    loadRepositories()\n  }, [])\n\n  const loadRepositories = async () => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    \n    try {\n      const response = await repositoryApi.getAll()\n      if (response.success && response.data) {\n        dispatch({ type: 'SET_REPOSITORIES', payload: response.data })\n      } else {\n        dispatch({ type: 'SET_ERROR', payload: response.error || 'Failed to load repositories' })\n      }\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Network error while loading repositories' })\n    }\n  }\n\n  const createRepository = async (repository: RepositoryRequest) => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    \n    try {\n      const response = await repositoryApi.create(repository)\n      if (response.success && response.data) {\n        dispatch({ type: 'ADD_REPOSITORY', payload: response.data })\n      } else {\n        dispatch({ type: 'SET_ERROR', payload: response.error || 'Failed to create repository' })\n      }\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Network error while creating repository' })\n    }\n  }\n\n  const updateRepository = async (id: string, repository: Partial<RepositoryRequest>) => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    \n    try {\n      const response = await repositoryApi.update(id, repository)\n      if (response.success && response.data) {\n        dispatch({ type: 'UPDATE_REPOSITORY', payload: { id, repository: response.data } })\n      } else {\n        dispatch({ type: 'SET_ERROR', payload: response.error || 'Failed to update repository' })\n      }\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Network error while updating repository' })\n    }\n  }\n\n  const deleteRepository = async (id: string) => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    \n    try {\n      const response = await repositoryApi.delete(id)\n      if (response.success) {\n        dispatch({ type: 'DELETE_REPOSITORY', payload: id })\n      } else {\n        dispatch({ type: 'SET_ERROR', payload: response.error || 'Failed to delete repository' })\n      }\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Network error while deleting repository' })\n    }\n  }\n\n  const setSelectedRepositories = (repositoryIds: string[]) => {\n    dispatch({ type: 'SET_SELECTED_REPOSITORIES', payload: repositoryIds })\n  }\n\n  const toggleRepositorySelection = (repositoryId: string) => {\n    dispatch({ type: 'TOGGLE_REPOSITORY_SELECTION', payload: repositoryId })\n  }\n\n  const clearError = () => {\n    dispatch({ type: 'SET_ERROR', payload: null })\n  }\n\n  const value: RepositoryContextType = {\n    ...state,\n    loadRepositories,\n    createRepository,\n    updateRepository,\n    deleteRepository,\n    setSelectedRepositories,\n    toggleRepositorySelection,\n    clearError,\n  }\n\n  return (\n    <RepositoryContext.Provider value={value}>\n      {children}\n    </RepositoryContext.Provider>\n  )\n}\n\nexport function useRepositories() {\n  const context = useContext(RepositoryContext)\n  if (context === undefined) {\n    throw new Error('useRepositories must be used within a RepositoryProvider')\n  }\n  return context\n}\n\nexport default RepositoryContext