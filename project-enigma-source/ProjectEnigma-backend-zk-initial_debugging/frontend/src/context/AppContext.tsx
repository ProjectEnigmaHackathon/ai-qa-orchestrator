import React, { createContext, useContext, useReducer } from 'react'\nimport { AppSettings } from '@/types'\nimport { useLocalStorage } from '@/hooks'\n\ninterface AppState {\n  settings: AppSettings\n  isLoading: boolean\n  error: string | null\n  notifications: Array<{\n    id: string\n    type: 'info' | 'success' | 'warning' | 'error'\n    title: string\n    message?: string\n    timestamp: Date\n  }>\n}\n\ntype AppAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'UPDATE_SETTINGS'; payload: Partial<AppSettings> }\n  | { type: 'ADD_NOTIFICATION'; payload: { type: 'info' | 'success' | 'warning' | 'error'; title: string; message?: string } }\n  | { type: 'REMOVE_NOTIFICATION'; payload: string }\n  | { type: 'CLEAR_NOTIFICATIONS' }\n\ninterface AppContextType extends AppState {\n  updateSettings: (settings: Partial<AppSettings>) => void\n  setLoading: (loading: boolean) => void\n  setError: (error: string | null) => void\n  addNotification: (type: 'info' | 'success' | 'warning' | 'error', title: string, message?: string) => void\n  removeNotification: (id: string) => void\n  clearNotifications: () => void\n  clearError: () => void\n}\n\nconst defaultSettings: AppSettings = {\n  theme: 'light',\n  notifications: true,\n  autoSave: true,\n  defaultRepositories: [],\n}\n\nconst initialState: AppState = {\n  settings: defaultSettings,\n  isLoading: false,\n  error: null,\n  notifications: [],\n}\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload }\n    \n    case 'SET_ERROR':\n      return { ...state, error: action.payload }\n    \n    case 'UPDATE_SETTINGS':\n      return {\n        ...state,\n        settings: { ...state.settings, ...action.payload },\n      }\n    \n    case 'ADD_NOTIFICATION':\n      const newNotification = {\n        id: `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        ...action.payload,\n        timestamp: new Date(),\n      }\n      return {\n        ...state,\n        notifications: [...state.notifications, newNotification],\n      }\n    \n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload),\n      }\n    \n    case 'CLEAR_NOTIFICATIONS':\n      return {\n        ...state,\n        notifications: [],\n      }\n    \n    default:\n      return state\n  }\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined)\n\nexport function AppProvider({ children }: { children: React.ReactNode }) {\n  // Load settings from localStorage\n  const [persistedSettings, setPersistedSettings] = useLocalStorage<AppSettings>(\n    'app-settings',\n    defaultSettings\n  )\n\n  const [state, dispatch] = useReducer(appReducer, {\n    ...initialState,\n    settings: persistedSettings,\n  })\n\n  const updateSettings = (settings: Partial<AppSettings>) => {\n    const newSettings = { ...state.settings, ...settings }\n    dispatch({ type: 'UPDATE_SETTINGS', payload: settings })\n    setPersistedSettings(newSettings)\n  }\n\n  const setLoading = (loading: boolean) => {\n    dispatch({ type: 'SET_LOADING', payload: loading })\n  }\n\n  const setError = (error: string | null) => {\n    dispatch({ type: 'SET_ERROR', payload: error })\n  }\n\n  const addNotification = (\n    type: 'info' | 'success' | 'warning' | 'error',\n    title: string,\n    message?: string\n  ) => {\n    dispatch({ type: 'ADD_NOTIFICATION', payload: { type, title, message } })\n\n    // Auto-remove success and info notifications after 5 seconds\n    if (type === 'success' || type === 'info') {\n      setTimeout(() => {\n        dispatch({ type: 'REMOVE_NOTIFICATION', payload: `notification-${Date.now()}` })\n      }, 5000)\n    }\n  }\n\n  const removeNotification = (id: string) => {\n    dispatch({ type: 'REMOVE_NOTIFICATION', payload: id })\n  }\n\n  const clearNotifications = () => {\n    dispatch({ type: 'CLEAR_NOTIFICATIONS' })\n  }\n\n  const clearError = () => {\n    dispatch({ type: 'SET_ERROR', payload: null })\n  }\n\n  const value: AppContextType = {\n    ...state,\n    updateSettings,\n    setLoading,\n    setError,\n    addNotification,\n    removeNotification,\n    clearNotifications,\n    clearError,\n  }\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport function useApp() {\n  const context = useContext(AppContext)\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider')\n  }\n  return context\n}\n\nexport default AppContext